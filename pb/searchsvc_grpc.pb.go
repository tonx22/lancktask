// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: searchsvc.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SearchSvcClient is the client API for SearchSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SearchSvcClient interface {
	GetCodeByNumber(ctx context.Context, in *PhoneNumberRequest, opts ...grpc.CallOption) (*MCCMNCCodeReply, error)
	StreamingGetCodeByNumber(ctx context.Context, opts ...grpc.CallOption) (SearchSvc_StreamingGetCodeByNumberClient, error)
}

type searchSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewSearchSvcClient(cc grpc.ClientConnInterface) SearchSvcClient {
	return &searchSvcClient{cc}
}

func (c *searchSvcClient) GetCodeByNumber(ctx context.Context, in *PhoneNumberRequest, opts ...grpc.CallOption) (*MCCMNCCodeReply, error) {
	out := new(MCCMNCCodeReply)
	err := c.cc.Invoke(ctx, "/pb.SearchSvc/GetCodeByNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchSvcClient) StreamingGetCodeByNumber(ctx context.Context, opts ...grpc.CallOption) (SearchSvc_StreamingGetCodeByNumberClient, error) {
	stream, err := c.cc.NewStream(ctx, &SearchSvc_ServiceDesc.Streams[0], "/pb.SearchSvc/StreamingGetCodeByNumber", opts...)
	if err != nil {
		return nil, err
	}
	x := &searchSvcStreamingGetCodeByNumberClient{stream}
	return x, nil
}

type SearchSvc_StreamingGetCodeByNumberClient interface {
	Send(*PhoneNumberRequest) error
	Recv() (*MCCMNCCodeReply, error)
	grpc.ClientStream
}

type searchSvcStreamingGetCodeByNumberClient struct {
	grpc.ClientStream
}

func (x *searchSvcStreamingGetCodeByNumberClient) Send(m *PhoneNumberRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *searchSvcStreamingGetCodeByNumberClient) Recv() (*MCCMNCCodeReply, error) {
	m := new(MCCMNCCodeReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SearchSvcServer is the server API for SearchSvc service.
// All implementations must embed UnimplementedSearchSvcServer
// for forward compatibility
type SearchSvcServer interface {
	GetCodeByNumber(context.Context, *PhoneNumberRequest) (*MCCMNCCodeReply, error)
	StreamingGetCodeByNumber(SearchSvc_StreamingGetCodeByNumberServer) error
	mustEmbedUnimplementedSearchSvcServer()
}

// UnimplementedSearchSvcServer must be embedded to have forward compatible implementations.
type UnimplementedSearchSvcServer struct {
}

func (UnimplementedSearchSvcServer) GetCodeByNumber(context.Context, *PhoneNumberRequest) (*MCCMNCCodeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCodeByNumber not implemented")
}
func (UnimplementedSearchSvcServer) StreamingGetCodeByNumber(SearchSvc_StreamingGetCodeByNumberServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamingGetCodeByNumber not implemented")
}
func (UnimplementedSearchSvcServer) mustEmbedUnimplementedSearchSvcServer() {}

// UnsafeSearchSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SearchSvcServer will
// result in compilation errors.
type UnsafeSearchSvcServer interface {
	mustEmbedUnimplementedSearchSvcServer()
}

func RegisterSearchSvcServer(s grpc.ServiceRegistrar, srv SearchSvcServer) {
	s.RegisterService(&SearchSvc_ServiceDesc, srv)
}

func _SearchSvc_GetCodeByNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PhoneNumberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchSvcServer).GetCodeByNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SearchSvc/GetCodeByNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchSvcServer).GetCodeByNumber(ctx, req.(*PhoneNumberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchSvc_StreamingGetCodeByNumber_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SearchSvcServer).StreamingGetCodeByNumber(&searchSvcStreamingGetCodeByNumberServer{stream})
}

type SearchSvc_StreamingGetCodeByNumberServer interface {
	Send(*MCCMNCCodeReply) error
	Recv() (*PhoneNumberRequest, error)
	grpc.ServerStream
}

type searchSvcStreamingGetCodeByNumberServer struct {
	grpc.ServerStream
}

func (x *searchSvcStreamingGetCodeByNumberServer) Send(m *MCCMNCCodeReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *searchSvcStreamingGetCodeByNumberServer) Recv() (*PhoneNumberRequest, error) {
	m := new(PhoneNumberRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SearchSvc_ServiceDesc is the grpc.ServiceDesc for SearchSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SearchSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.SearchSvc",
	HandlerType: (*SearchSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCodeByNumber",
			Handler:    _SearchSvc_GetCodeByNumber_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamingGetCodeByNumber",
			Handler:       _SearchSvc_StreamingGetCodeByNumber_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "searchsvc.proto",
}
